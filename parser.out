Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement programme
Rule 3     statement -> assignation
Rule 4     statement -> declaration
Rule 5     statement -> expression
Rule 6     statement -> structure
Rule 7     statement -> comment
Rule 8     statement -> BREAK
Rule 9     statement -> BREAK new_line
Rule 10    comment -> statement SL_COMMENT new_line
Rule 11    comment -> statement ML_COMMENT new_line
Rule 12    comment -> SL_COMMENT new_line
Rule 13    comment -> ML_COMMENT new_line
Rule 14    expression -> expression_num
Rule 15    expression -> expression_bool
Rule 16    expression_num -> ADD_OP expression_num AN expression_num
Rule 17    expression_num -> MUL_OP expression_num AN expression_num
Rule 18    expression_num -> MOD_OP expression_num AN expression_num
Rule 19    expression_num -> MAX_OP expression_num AN expression_num
Rule 20    expression_num -> MIN_OP expression_num AN expression_num
Rule 21    expression_num -> ADD_OP expression_num AN expression_num new_line
Rule 22    expression_num -> MUL_OP expression_num AN expression_num new_line
Rule 23    expression_num -> MOD_OP expression_num AN expression_num new_line
Rule 24    expression_num -> MAX_OP expression_num AN expression_num new_line
Rule 25    expression_num -> MIN_OP expression_num AN expression_num new_line
Rule 26    expression_num -> INC_OP expression_num
Rule 27    expression_num -> INC_OP expression_num new_line
Rule 28    expression_num -> NUMBER
Rule 29    expression_num -> IDENTIFIER
Rule 30    expression_num -> NUMBER new_line
Rule 31    expression_num -> IDENTIFIER new_line
Rule 32    expression_bool -> BOOL
Rule 33    expression_bool -> BOOL new_line
Rule 34    expression_bool -> BOOL_OP expression_bool AN expression_bool
Rule 35    expression_bool -> BOOL_OP expression_bool AN expression_bool new_line
Rule 36    expression_bool -> NOT expression_bool
Rule 37    expression_bool -> NOT expression_bool new_line
Rule 38    expression_bool -> COMP expression_num AN expression_num
Rule 39    expression_bool -> COMP expression_num AN expression_num new_line
Rule 40    declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
Rule 41    declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
Rule 42    assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression
Rule 43    assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
Rule 44    new_line -> NL
Rule 45    new_line -> NL NL
Rule 46    structure -> WHILE expression_bool programme END_LOOP
Rule 47    structure -> WHILE expression_bool programme END_LOOP new_line
Rule 48    structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP
Rule 49    structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
Rule 50    structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END
Rule 51    structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
Rule 52    structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
Rule 53    structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line

Terminals, with rules where they appear

ADD_OP               : 16 21
AN                   : 16 17 18 19 20 21 22 23 24 25 34 35 38 39
ASSIGNEMENT_DECL     : 40 41
ASSIGNEMENT_SIMPLE   : 42 43
BOOL                 : 32 33
BOOL_OP              : 34 35
BREAK                : 8 9
COMP                 : 38 39
DECLARATION          : 40 41
END_LOOP             : 46 47 48 49
FOR                  : 48 49
IDENTIFIER           : 29 31 40 41 42 43 48 49
IF                   : 50 51 52 53
IF_END               : 50 51 52 53
IF_FALSE             : 52 53
IF_TRUE              : 50 51 52 53
INC_OP               : 26 27
MAX_OP               : 19 24
MIN_OP               : 20 25
ML_COMMENT           : 11 13
MOD_OP               : 18 23
MUL_OP               : 17 22
NL                   : 44 45 45
NOT                  : 36 37
NUMBER               : 28 30
SL_COMMENT           : 10 12
UNTIL                : 48 49
WHILE                : 46 47
error                : 

Nonterminals, with rules where they appear

assignation          : 3
comment              : 7
declaration          : 4
expression           : 5 40 41 42 43
expression_bool      : 15 34 34 35 35 36 37 46 47 50 51 52 53
expression_num       : 14 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 27 38 38 39 39 48 49
new_line             : 9 10 11 12 13 21 22 23 24 25 27 30 31 33 35 37 39 41 43 47 49 50 50 51 51 51 52 52 52 53 53 53 53
programme            : 2 46 47 48 49 50 51 52 52 53 53 0
statement            : 1 2 10 11
structure            : 6

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . declaration
    (5) statement -> . expression
    (6) statement -> . structure
    (7) statement -> . comment
    (8) statement -> . BREAK
    (9) statement -> . BREAK new_line
    (42) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression
    (43) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
    (40) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (46) structure -> . WHILE expression_bool programme END_LOOP
    (47) structure -> . WHILE expression_bool programme END_LOOP new_line
    (48) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
    (50) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (10) comment -> . statement SL_COMMENT new_line
    (11) comment -> . statement ML_COMMENT new_line
    (12) comment -> . SL_COMMENT new_line
    (13) comment -> . ML_COMMENT new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BREAK           shift and go to state 22
    IDENTIFIER      shift and go to state 13
    DECLARATION     shift and go to state 23
    WHILE           shift and go to state 5
    FOR             shift and go to state 15
    SL_COMMENT      shift and go to state 21
    ML_COMMENT      shift and go to state 6
    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    comment                        shift and go to state 1
    assignation                    shift and go to state 19
    expression_bool                shift and go to state 14
    statement                      shift and go to state 10
    declaration                    shift and go to state 2
    expression_num                 shift and go to state 7
    expression                     shift and go to state 25
    structure                      shift and go to state 17
    programme                      shift and go to state 27

state 1

    (7) statement -> comment .

    SL_COMMENT      reduce using rule 7 (statement -> comment .)
    ML_COMMENT      reduce using rule 7 (statement -> comment .)
    BREAK           reduce using rule 7 (statement -> comment .)
    IDENTIFIER      reduce using rule 7 (statement -> comment .)
    DECLARATION     reduce using rule 7 (statement -> comment .)
    WHILE           reduce using rule 7 (statement -> comment .)
    FOR             reduce using rule 7 (statement -> comment .)
    ADD_OP          reduce using rule 7 (statement -> comment .)
    MUL_OP          reduce using rule 7 (statement -> comment .)
    MOD_OP          reduce using rule 7 (statement -> comment .)
    MAX_OP          reduce using rule 7 (statement -> comment .)
    MIN_OP          reduce using rule 7 (statement -> comment .)
    INC_OP          reduce using rule 7 (statement -> comment .)
    NUMBER          reduce using rule 7 (statement -> comment .)
    BOOL            reduce using rule 7 (statement -> comment .)
    BOOL_OP         reduce using rule 7 (statement -> comment .)
    NOT             reduce using rule 7 (statement -> comment .)
    COMP            reduce using rule 7 (statement -> comment .)
    $end            reduce using rule 7 (statement -> comment .)
    END_LOOP        reduce using rule 7 (statement -> comment .)
    IF_END          reduce using rule 7 (statement -> comment .)
    IF_FALSE        reduce using rule 7 (statement -> comment .)


state 2

    (4) statement -> declaration .

    SL_COMMENT      reduce using rule 4 (statement -> declaration .)
    ML_COMMENT      reduce using rule 4 (statement -> declaration .)
    BREAK           reduce using rule 4 (statement -> declaration .)
    IDENTIFIER      reduce using rule 4 (statement -> declaration .)
    DECLARATION     reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    FOR             reduce using rule 4 (statement -> declaration .)
    ADD_OP          reduce using rule 4 (statement -> declaration .)
    MUL_OP          reduce using rule 4 (statement -> declaration .)
    MOD_OP          reduce using rule 4 (statement -> declaration .)
    MAX_OP          reduce using rule 4 (statement -> declaration .)
    MIN_OP          reduce using rule 4 (statement -> declaration .)
    INC_OP          reduce using rule 4 (statement -> declaration .)
    NUMBER          reduce using rule 4 (statement -> declaration .)
    BOOL            reduce using rule 4 (statement -> declaration .)
    BOOL_OP         reduce using rule 4 (statement -> declaration .)
    NOT             reduce using rule 4 (statement -> declaration .)
    COMP            reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    END_LOOP        reduce using rule 4 (statement -> declaration .)
    IF_END          reduce using rule 4 (statement -> declaration .)
    IF_FALSE        reduce using rule 4 (statement -> declaration .)


state 3

    (28) expression_num -> NUMBER .
    (30) expression_num -> NUMBER . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 28 (expression_num -> NUMBER .)
    IDENTIFIER      reduce using rule 28 (expression_num -> NUMBER .)
    DECLARATION     reduce using rule 28 (expression_num -> NUMBER .)
    WHILE           reduce using rule 28 (expression_num -> NUMBER .)
    FOR             reduce using rule 28 (expression_num -> NUMBER .)
    SL_COMMENT      reduce using rule 28 (expression_num -> NUMBER .)
    ML_COMMENT      reduce using rule 28 (expression_num -> NUMBER .)
    ADD_OP          reduce using rule 28 (expression_num -> NUMBER .)
    MUL_OP          reduce using rule 28 (expression_num -> NUMBER .)
    MOD_OP          reduce using rule 28 (expression_num -> NUMBER .)
    MAX_OP          reduce using rule 28 (expression_num -> NUMBER .)
    MIN_OP          reduce using rule 28 (expression_num -> NUMBER .)
    INC_OP          reduce using rule 28 (expression_num -> NUMBER .)
    NUMBER          reduce using rule 28 (expression_num -> NUMBER .)
    BOOL            reduce using rule 28 (expression_num -> NUMBER .)
    BOOL_OP         reduce using rule 28 (expression_num -> NUMBER .)
    NOT             reduce using rule 28 (expression_num -> NUMBER .)
    COMP            reduce using rule 28 (expression_num -> NUMBER .)
    IF_END          reduce using rule 28 (expression_num -> NUMBER .)
    AN              reduce using rule 28 (expression_num -> NUMBER .)
    $end            reduce using rule 28 (expression_num -> NUMBER .)
    END_LOOP        reduce using rule 28 (expression_num -> NUMBER .)
    IF_FALSE        reduce using rule 28 (expression_num -> NUMBER .)
    IF              reduce using rule 28 (expression_num -> NUMBER .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 28 (expression_num -> NUMBER .) ]

    new_line                       shift and go to state 28

state 4

    (26) expression_num -> INC_OP . expression_num
    (27) expression_num -> INC_OP . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 31

state 5

    (46) structure -> WHILE . expression_bool programme END_LOOP
    (47) structure -> WHILE . expression_bool programme END_LOOP new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    expression_bool                shift and go to state 32

state 6

    (13) comment -> ML_COMMENT . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 33

state 7

    (14) expression -> expression_num .

    NL              reduce using rule 14 (expression -> expression_num .)
    SL_COMMENT      reduce using rule 14 (expression -> expression_num .)
    ML_COMMENT      reduce using rule 14 (expression -> expression_num .)
    BREAK           reduce using rule 14 (expression -> expression_num .)
    IDENTIFIER      reduce using rule 14 (expression -> expression_num .)
    DECLARATION     reduce using rule 14 (expression -> expression_num .)
    WHILE           reduce using rule 14 (expression -> expression_num .)
    FOR             reduce using rule 14 (expression -> expression_num .)
    ADD_OP          reduce using rule 14 (expression -> expression_num .)
    MUL_OP          reduce using rule 14 (expression -> expression_num .)
    MOD_OP          reduce using rule 14 (expression -> expression_num .)
    MAX_OP          reduce using rule 14 (expression -> expression_num .)
    MIN_OP          reduce using rule 14 (expression -> expression_num .)
    INC_OP          reduce using rule 14 (expression -> expression_num .)
    NUMBER          reduce using rule 14 (expression -> expression_num .)
    BOOL            reduce using rule 14 (expression -> expression_num .)
    BOOL_OP         reduce using rule 14 (expression -> expression_num .)
    NOT             reduce using rule 14 (expression -> expression_num .)
    COMP            reduce using rule 14 (expression -> expression_num .)
    $end            reduce using rule 14 (expression -> expression_num .)
    END_LOOP        reduce using rule 14 (expression -> expression_num .)
    IF_END          reduce using rule 14 (expression -> expression_num .)
    IF_FALSE        reduce using rule 14 (expression -> expression_num .)


state 8

    (34) expression_bool -> BOOL_OP . expression_bool AN expression_bool
    (35) expression_bool -> BOOL_OP . expression_bool AN expression_bool new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    expression_bool                shift and go to state 34

state 9

    (20) expression_num -> MIN_OP . expression_num AN expression_num
    (25) expression_num -> MIN_OP . expression_num AN expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 35

state 10

    (1) programme -> statement .
    (2) programme -> statement . programme
    (10) comment -> statement . SL_COMMENT new_line
    (11) comment -> statement . ML_COMMENT new_line
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . declaration
    (5) statement -> . expression
    (6) statement -> . structure
    (7) statement -> . comment
    (8) statement -> . BREAK
    (9) statement -> . BREAK new_line
    (42) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression
    (43) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
    (40) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (46) structure -> . WHILE expression_bool programme END_LOOP
    (47) structure -> . WHILE expression_bool programme END_LOOP new_line
    (48) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
    (50) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (10) comment -> . statement SL_COMMENT new_line
    (11) comment -> . statement ML_COMMENT new_line
    (12) comment -> . SL_COMMENT new_line
    (13) comment -> . ML_COMMENT new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    $end            reduce using rule 1 (programme -> statement .)
    END_LOOP        reduce using rule 1 (programme -> statement .)
    IF_END          reduce using rule 1 (programme -> statement .)
    IF_FALSE        reduce using rule 1 (programme -> statement .)
    SL_COMMENT      shift and go to state 37
    ML_COMMENT      shift and go to state 36
    BREAK           shift and go to state 22
    IDENTIFIER      shift and go to state 13
    DECLARATION     shift and go to state 23
    WHILE           shift and go to state 5
    FOR             shift and go to state 15
    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    comment                        shift and go to state 1
    assignation                    shift and go to state 19
    expression_bool                shift and go to state 14
    statement                      shift and go to state 10
    declaration                    shift and go to state 2
    expression_num                 shift and go to state 7
    expression                     shift and go to state 25
    structure                      shift and go to state 17
    programme                      shift and go to state 38

state 11

    (16) expression_num -> ADD_OP . expression_num AN expression_num
    (21) expression_num -> ADD_OP . expression_num AN expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 39

state 12

    (32) expression_bool -> BOOL .
    (33) expression_bool -> BOOL . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    SL_COMMENT      reduce using rule 32 (expression_bool -> BOOL .)
    ML_COMMENT      reduce using rule 32 (expression_bool -> BOOL .)
    BREAK           reduce using rule 32 (expression_bool -> BOOL .)
    IDENTIFIER      reduce using rule 32 (expression_bool -> BOOL .)
    DECLARATION     reduce using rule 32 (expression_bool -> BOOL .)
    WHILE           reduce using rule 32 (expression_bool -> BOOL .)
    FOR             reduce using rule 32 (expression_bool -> BOOL .)
    ADD_OP          reduce using rule 32 (expression_bool -> BOOL .)
    MUL_OP          reduce using rule 32 (expression_bool -> BOOL .)
    MOD_OP          reduce using rule 32 (expression_bool -> BOOL .)
    MAX_OP          reduce using rule 32 (expression_bool -> BOOL .)
    MIN_OP          reduce using rule 32 (expression_bool -> BOOL .)
    INC_OP          reduce using rule 32 (expression_bool -> BOOL .)
    NUMBER          reduce using rule 32 (expression_bool -> BOOL .)
    BOOL            reduce using rule 32 (expression_bool -> BOOL .)
    BOOL_OP         reduce using rule 32 (expression_bool -> BOOL .)
    NOT             reduce using rule 32 (expression_bool -> BOOL .)
    COMP            reduce using rule 32 (expression_bool -> BOOL .)
    $end            reduce using rule 32 (expression_bool -> BOOL .)
    END_LOOP        reduce using rule 32 (expression_bool -> BOOL .)
    IF_END          reduce using rule 32 (expression_bool -> BOOL .)
    IF_FALSE        reduce using rule 32 (expression_bool -> BOOL .)
    IF              reduce using rule 32 (expression_bool -> BOOL .)
    AN              reduce using rule 32 (expression_bool -> BOOL .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 32 (expression_bool -> BOOL .) ]

    new_line                       shift and go to state 40

state 13

    (42) assignation -> IDENTIFIER . ASSIGNEMENT_SIMPLE expression
    (43) assignation -> IDENTIFIER . ASSIGNEMENT_SIMPLE expression new_line
    (29) expression_num -> IDENTIFIER .
    (31) expression_num -> IDENTIFIER . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    ASSIGNEMENT_SIMPLE shift and go to state 42
    SL_COMMENT      reduce using rule 29 (expression_num -> IDENTIFIER .)
    ML_COMMENT      reduce using rule 29 (expression_num -> IDENTIFIER .)
    BREAK           reduce using rule 29 (expression_num -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 29 (expression_num -> IDENTIFIER .)
    DECLARATION     reduce using rule 29 (expression_num -> IDENTIFIER .)
    WHILE           reduce using rule 29 (expression_num -> IDENTIFIER .)
    FOR             reduce using rule 29 (expression_num -> IDENTIFIER .)
    ADD_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MUL_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MOD_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MAX_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MIN_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    INC_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    NUMBER          reduce using rule 29 (expression_num -> IDENTIFIER .)
    BOOL            reduce using rule 29 (expression_num -> IDENTIFIER .)
    BOOL_OP         reduce using rule 29 (expression_num -> IDENTIFIER .)
    NOT             reduce using rule 29 (expression_num -> IDENTIFIER .)
    COMP            reduce using rule 29 (expression_num -> IDENTIFIER .)
    IF_END          reduce using rule 29 (expression_num -> IDENTIFIER .)
    $end            reduce using rule 29 (expression_num -> IDENTIFIER .)
    END_LOOP        reduce using rule 29 (expression_num -> IDENTIFIER .)
    IF_FALSE        reduce using rule 29 (expression_num -> IDENTIFIER .)
    NL              shift and go to state 29

    new_line                       shift and go to state 41

state 14

    (15) expression -> expression_bool .
    (50) structure -> expression_bool . IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> expression_bool . IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> expression_bool . IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> expression_bool . IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line

    SL_COMMENT      reduce using rule 15 (expression -> expression_bool .)
    ML_COMMENT      reduce using rule 15 (expression -> expression_bool .)
    BREAK           reduce using rule 15 (expression -> expression_bool .)
    IDENTIFIER      reduce using rule 15 (expression -> expression_bool .)
    DECLARATION     reduce using rule 15 (expression -> expression_bool .)
    WHILE           reduce using rule 15 (expression -> expression_bool .)
    FOR             reduce using rule 15 (expression -> expression_bool .)
    ADD_OP          reduce using rule 15 (expression -> expression_bool .)
    MUL_OP          reduce using rule 15 (expression -> expression_bool .)
    MOD_OP          reduce using rule 15 (expression -> expression_bool .)
    MAX_OP          reduce using rule 15 (expression -> expression_bool .)
    MIN_OP          reduce using rule 15 (expression -> expression_bool .)
    INC_OP          reduce using rule 15 (expression -> expression_bool .)
    NUMBER          reduce using rule 15 (expression -> expression_bool .)
    BOOL            reduce using rule 15 (expression -> expression_bool .)
    BOOL_OP         reduce using rule 15 (expression -> expression_bool .)
    NOT             reduce using rule 15 (expression -> expression_bool .)
    COMP            reduce using rule 15 (expression -> expression_bool .)
    $end            reduce using rule 15 (expression -> expression_bool .)
    END_LOOP        reduce using rule 15 (expression -> expression_bool .)
    IF_END          reduce using rule 15 (expression -> expression_bool .)
    IF_FALSE        reduce using rule 15 (expression -> expression_bool .)
    IF              shift and go to state 43


state 15

    (48) structure -> FOR . IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> FOR . IDENTIFIER UNTIL expression_num programme END_LOOP new_line

    IDENTIFIER      shift and go to state 44


state 16

    (19) expression_num -> MAX_OP . expression_num AN expression_num
    (24) expression_num -> MAX_OP . expression_num AN expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 45

state 17

    (6) statement -> structure .

    SL_COMMENT      reduce using rule 6 (statement -> structure .)
    ML_COMMENT      reduce using rule 6 (statement -> structure .)
    BREAK           reduce using rule 6 (statement -> structure .)
    IDENTIFIER      reduce using rule 6 (statement -> structure .)
    DECLARATION     reduce using rule 6 (statement -> structure .)
    WHILE           reduce using rule 6 (statement -> structure .)
    FOR             reduce using rule 6 (statement -> structure .)
    ADD_OP          reduce using rule 6 (statement -> structure .)
    MUL_OP          reduce using rule 6 (statement -> structure .)
    MOD_OP          reduce using rule 6 (statement -> structure .)
    MAX_OP          reduce using rule 6 (statement -> structure .)
    MIN_OP          reduce using rule 6 (statement -> structure .)
    INC_OP          reduce using rule 6 (statement -> structure .)
    NUMBER          reduce using rule 6 (statement -> structure .)
    BOOL            reduce using rule 6 (statement -> structure .)
    BOOL_OP         reduce using rule 6 (statement -> structure .)
    NOT             reduce using rule 6 (statement -> structure .)
    COMP            reduce using rule 6 (statement -> structure .)
    $end            reduce using rule 6 (statement -> structure .)
    END_LOOP        reduce using rule 6 (statement -> structure .)
    IF_END          reduce using rule 6 (statement -> structure .)
    IF_FALSE        reduce using rule 6 (statement -> structure .)


state 18

    (17) expression_num -> MUL_OP . expression_num AN expression_num
    (22) expression_num -> MUL_OP . expression_num AN expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 46

state 19

    (3) statement -> assignation .

    SL_COMMENT      reduce using rule 3 (statement -> assignation .)
    ML_COMMENT      reduce using rule 3 (statement -> assignation .)
    BREAK           reduce using rule 3 (statement -> assignation .)
    IDENTIFIER      reduce using rule 3 (statement -> assignation .)
    DECLARATION     reduce using rule 3 (statement -> assignation .)
    WHILE           reduce using rule 3 (statement -> assignation .)
    FOR             reduce using rule 3 (statement -> assignation .)
    ADD_OP          reduce using rule 3 (statement -> assignation .)
    MUL_OP          reduce using rule 3 (statement -> assignation .)
    MOD_OP          reduce using rule 3 (statement -> assignation .)
    MAX_OP          reduce using rule 3 (statement -> assignation .)
    MIN_OP          reduce using rule 3 (statement -> assignation .)
    INC_OP          reduce using rule 3 (statement -> assignation .)
    NUMBER          reduce using rule 3 (statement -> assignation .)
    BOOL            reduce using rule 3 (statement -> assignation .)
    BOOL_OP         reduce using rule 3 (statement -> assignation .)
    NOT             reduce using rule 3 (statement -> assignation .)
    COMP            reduce using rule 3 (statement -> assignation .)
    $end            reduce using rule 3 (statement -> assignation .)
    END_LOOP        reduce using rule 3 (statement -> assignation .)
    IF_END          reduce using rule 3 (statement -> assignation .)
    IF_FALSE        reduce using rule 3 (statement -> assignation .)


state 20

    (18) expression_num -> MOD_OP . expression_num AN expression_num
    (23) expression_num -> MOD_OP . expression_num AN expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 47

state 21

    (12) comment -> SL_COMMENT . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 48

state 22

    (8) statement -> BREAK .
    (9) statement -> BREAK . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 8 (statement -> BREAK .)
    ML_COMMENT      reduce using rule 8 (statement -> BREAK .)
    BREAK           reduce using rule 8 (statement -> BREAK .)
    IDENTIFIER      reduce using rule 8 (statement -> BREAK .)
    DECLARATION     reduce using rule 8 (statement -> BREAK .)
    WHILE           reduce using rule 8 (statement -> BREAK .)
    FOR             reduce using rule 8 (statement -> BREAK .)
    ADD_OP          reduce using rule 8 (statement -> BREAK .)
    MUL_OP          reduce using rule 8 (statement -> BREAK .)
    MOD_OP          reduce using rule 8 (statement -> BREAK .)
    MAX_OP          reduce using rule 8 (statement -> BREAK .)
    MIN_OP          reduce using rule 8 (statement -> BREAK .)
    INC_OP          reduce using rule 8 (statement -> BREAK .)
    NUMBER          reduce using rule 8 (statement -> BREAK .)
    BOOL            reduce using rule 8 (statement -> BREAK .)
    BOOL_OP         reduce using rule 8 (statement -> BREAK .)
    NOT             reduce using rule 8 (statement -> BREAK .)
    COMP            reduce using rule 8 (statement -> BREAK .)
    $end            reduce using rule 8 (statement -> BREAK .)
    END_LOOP        reduce using rule 8 (statement -> BREAK .)
    IF_END          reduce using rule 8 (statement -> BREAK .)
    IF_FALSE        reduce using rule 8 (statement -> BREAK .)
    NL              shift and go to state 29

    new_line                       shift and go to state 49

state 23

    (40) declaration -> DECLARATION . IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> DECLARATION . IDENTIFIER ASSIGNEMENT_DECL expression new_line

    IDENTIFIER      shift and go to state 50


state 24

    (36) expression_bool -> NOT . expression_bool
    (37) expression_bool -> NOT . expression_bool new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    expression_bool                shift and go to state 51

state 25

    (5) statement -> expression .

    SL_COMMENT      reduce using rule 5 (statement -> expression .)
    ML_COMMENT      reduce using rule 5 (statement -> expression .)
    BREAK           reduce using rule 5 (statement -> expression .)
    IDENTIFIER      reduce using rule 5 (statement -> expression .)
    DECLARATION     reduce using rule 5 (statement -> expression .)
    WHILE           reduce using rule 5 (statement -> expression .)
    FOR             reduce using rule 5 (statement -> expression .)
    ADD_OP          reduce using rule 5 (statement -> expression .)
    MUL_OP          reduce using rule 5 (statement -> expression .)
    MOD_OP          reduce using rule 5 (statement -> expression .)
    MAX_OP          reduce using rule 5 (statement -> expression .)
    MIN_OP          reduce using rule 5 (statement -> expression .)
    INC_OP          reduce using rule 5 (statement -> expression .)
    NUMBER          reduce using rule 5 (statement -> expression .)
    BOOL            reduce using rule 5 (statement -> expression .)
    BOOL_OP         reduce using rule 5 (statement -> expression .)
    NOT             reduce using rule 5 (statement -> expression .)
    COMP            reduce using rule 5 (statement -> expression .)
    $end            reduce using rule 5 (statement -> expression .)
    END_LOOP        reduce using rule 5 (statement -> expression .)
    IF_END          reduce using rule 5 (statement -> expression .)
    IF_FALSE        reduce using rule 5 (statement -> expression .)


state 26

    (38) expression_bool -> COMP . expression_num AN expression_num
    (39) expression_bool -> COMP . expression_num AN expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 52

state 27

    (0) S' -> programme .



state 28

    (30) expression_num -> NUMBER new_line .

    BREAK           reduce using rule 30 (expression_num -> NUMBER new_line .)
    IDENTIFIER      reduce using rule 30 (expression_num -> NUMBER new_line .)
    DECLARATION     reduce using rule 30 (expression_num -> NUMBER new_line .)
    WHILE           reduce using rule 30 (expression_num -> NUMBER new_line .)
    FOR             reduce using rule 30 (expression_num -> NUMBER new_line .)
    SL_COMMENT      reduce using rule 30 (expression_num -> NUMBER new_line .)
    ML_COMMENT      reduce using rule 30 (expression_num -> NUMBER new_line .)
    ADD_OP          reduce using rule 30 (expression_num -> NUMBER new_line .)
    MUL_OP          reduce using rule 30 (expression_num -> NUMBER new_line .)
    MOD_OP          reduce using rule 30 (expression_num -> NUMBER new_line .)
    MAX_OP          reduce using rule 30 (expression_num -> NUMBER new_line .)
    MIN_OP          reduce using rule 30 (expression_num -> NUMBER new_line .)
    INC_OP          reduce using rule 30 (expression_num -> NUMBER new_line .)
    NUMBER          reduce using rule 30 (expression_num -> NUMBER new_line .)
    BOOL            reduce using rule 30 (expression_num -> NUMBER new_line .)
    BOOL_OP         reduce using rule 30 (expression_num -> NUMBER new_line .)
    NOT             reduce using rule 30 (expression_num -> NUMBER new_line .)
    COMP            reduce using rule 30 (expression_num -> NUMBER new_line .)
    IF_END          reduce using rule 30 (expression_num -> NUMBER new_line .)
    AN              reduce using rule 30 (expression_num -> NUMBER new_line .)
    NL              reduce using rule 30 (expression_num -> NUMBER new_line .)
    $end            reduce using rule 30 (expression_num -> NUMBER new_line .)
    END_LOOP        reduce using rule 30 (expression_num -> NUMBER new_line .)
    IF_FALSE        reduce using rule 30 (expression_num -> NUMBER new_line .)
    IF              reduce using rule 30 (expression_num -> NUMBER new_line .)


state 29

    (44) new_line -> NL .
    (45) new_line -> NL . NL

  ! shift/reduce conflict for NL resolved as shift
    SL_COMMENT      reduce using rule 44 (new_line -> NL .)
    ML_COMMENT      reduce using rule 44 (new_line -> NL .)
    BREAK           reduce using rule 44 (new_line -> NL .)
    IDENTIFIER      reduce using rule 44 (new_line -> NL .)
    DECLARATION     reduce using rule 44 (new_line -> NL .)
    WHILE           reduce using rule 44 (new_line -> NL .)
    FOR             reduce using rule 44 (new_line -> NL .)
    ADD_OP          reduce using rule 44 (new_line -> NL .)
    MUL_OP          reduce using rule 44 (new_line -> NL .)
    MOD_OP          reduce using rule 44 (new_line -> NL .)
    MAX_OP          reduce using rule 44 (new_line -> NL .)
    MIN_OP          reduce using rule 44 (new_line -> NL .)
    INC_OP          reduce using rule 44 (new_line -> NL .)
    NUMBER          reduce using rule 44 (new_line -> NL .)
    BOOL            reduce using rule 44 (new_line -> NL .)
    BOOL_OP         reduce using rule 44 (new_line -> NL .)
    NOT             reduce using rule 44 (new_line -> NL .)
    COMP            reduce using rule 44 (new_line -> NL .)
    $end            reduce using rule 44 (new_line -> NL .)
    AN              reduce using rule 44 (new_line -> NL .)
    END_LOOP        reduce using rule 44 (new_line -> NL .)
    IF_END          reduce using rule 44 (new_line -> NL .)
    IF_FALSE        reduce using rule 44 (new_line -> NL .)
    IF              reduce using rule 44 (new_line -> NL .)
    IF_TRUE         reduce using rule 44 (new_line -> NL .)
    NL              shift and go to state 53

  ! NL              [ reduce using rule 44 (new_line -> NL .) ]


state 30

    (29) expression_num -> IDENTIFIER .
    (31) expression_num -> IDENTIFIER . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 29 (expression_num -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 29 (expression_num -> IDENTIFIER .)
    DECLARATION     reduce using rule 29 (expression_num -> IDENTIFIER .)
    WHILE           reduce using rule 29 (expression_num -> IDENTIFIER .)
    FOR             reduce using rule 29 (expression_num -> IDENTIFIER .)
    SL_COMMENT      reduce using rule 29 (expression_num -> IDENTIFIER .)
    ML_COMMENT      reduce using rule 29 (expression_num -> IDENTIFIER .)
    ADD_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MUL_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MOD_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MAX_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    MIN_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    INC_OP          reduce using rule 29 (expression_num -> IDENTIFIER .)
    NUMBER          reduce using rule 29 (expression_num -> IDENTIFIER .)
    BOOL            reduce using rule 29 (expression_num -> IDENTIFIER .)
    BOOL_OP         reduce using rule 29 (expression_num -> IDENTIFIER .)
    NOT             reduce using rule 29 (expression_num -> IDENTIFIER .)
    COMP            reduce using rule 29 (expression_num -> IDENTIFIER .)
    AN              reduce using rule 29 (expression_num -> IDENTIFIER .)
    $end            reduce using rule 29 (expression_num -> IDENTIFIER .)
    END_LOOP        reduce using rule 29 (expression_num -> IDENTIFIER .)
    IF_END          reduce using rule 29 (expression_num -> IDENTIFIER .)
    IF_FALSE        reduce using rule 29 (expression_num -> IDENTIFIER .)
    IF              reduce using rule 29 (expression_num -> IDENTIFIER .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 29 (expression_num -> IDENTIFIER .) ]

    new_line                       shift and go to state 41

state 31

    (26) expression_num -> INC_OP expression_num .
    (27) expression_num -> INC_OP expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 26 (expression_num -> INC_OP expression_num .)
    IDENTIFIER      reduce using rule 26 (expression_num -> INC_OP expression_num .)
    DECLARATION     reduce using rule 26 (expression_num -> INC_OP expression_num .)
    WHILE           reduce using rule 26 (expression_num -> INC_OP expression_num .)
    FOR             reduce using rule 26 (expression_num -> INC_OP expression_num .)
    SL_COMMENT      reduce using rule 26 (expression_num -> INC_OP expression_num .)
    ML_COMMENT      reduce using rule 26 (expression_num -> INC_OP expression_num .)
    ADD_OP          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    MUL_OP          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    MOD_OP          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    MAX_OP          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    MIN_OP          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    INC_OP          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    NUMBER          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    BOOL            reduce using rule 26 (expression_num -> INC_OP expression_num .)
    BOOL_OP         reduce using rule 26 (expression_num -> INC_OP expression_num .)
    NOT             reduce using rule 26 (expression_num -> INC_OP expression_num .)
    COMP            reduce using rule 26 (expression_num -> INC_OP expression_num .)
    IF_END          reduce using rule 26 (expression_num -> INC_OP expression_num .)
    AN              reduce using rule 26 (expression_num -> INC_OP expression_num .)
    $end            reduce using rule 26 (expression_num -> INC_OP expression_num .)
    END_LOOP        reduce using rule 26 (expression_num -> INC_OP expression_num .)
    IF_FALSE        reduce using rule 26 (expression_num -> INC_OP expression_num .)
    IF              reduce using rule 26 (expression_num -> INC_OP expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 26 (expression_num -> INC_OP expression_num .) ]

    new_line                       shift and go to state 54

state 32

    (46) structure -> WHILE expression_bool . programme END_LOOP
    (47) structure -> WHILE expression_bool . programme END_LOOP new_line
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . declaration
    (5) statement -> . expression
    (6) statement -> . structure
    (7) statement -> . comment
    (8) statement -> . BREAK
    (9) statement -> . BREAK new_line
    (42) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression
    (43) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
    (40) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (46) structure -> . WHILE expression_bool programme END_LOOP
    (47) structure -> . WHILE expression_bool programme END_LOOP new_line
    (48) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
    (50) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (10) comment -> . statement SL_COMMENT new_line
    (11) comment -> . statement ML_COMMENT new_line
    (12) comment -> . SL_COMMENT new_line
    (13) comment -> . ML_COMMENT new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BREAK           shift and go to state 22
    IDENTIFIER      shift and go to state 13
    DECLARATION     shift and go to state 23
    WHILE           shift and go to state 5
    FOR             shift and go to state 15
    SL_COMMENT      shift and go to state 21
    ML_COMMENT      shift and go to state 6
    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    comment                        shift and go to state 1
    assignation                    shift and go to state 19
    structure                      shift and go to state 17
    statement                      shift and go to state 10
    declaration                    shift and go to state 2
    expression_num                 shift and go to state 7
    expression                     shift and go to state 25
    expression_bool                shift and go to state 14
    programme                      shift and go to state 55

state 33

    (13) comment -> ML_COMMENT new_line .

    SL_COMMENT      reduce using rule 13 (comment -> ML_COMMENT new_line .)
    ML_COMMENT      reduce using rule 13 (comment -> ML_COMMENT new_line .)
    BREAK           reduce using rule 13 (comment -> ML_COMMENT new_line .)
    IDENTIFIER      reduce using rule 13 (comment -> ML_COMMENT new_line .)
    DECLARATION     reduce using rule 13 (comment -> ML_COMMENT new_line .)
    WHILE           reduce using rule 13 (comment -> ML_COMMENT new_line .)
    FOR             reduce using rule 13 (comment -> ML_COMMENT new_line .)
    ADD_OP          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    MUL_OP          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    MOD_OP          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    MAX_OP          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    MIN_OP          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    INC_OP          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    NUMBER          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    BOOL            reduce using rule 13 (comment -> ML_COMMENT new_line .)
    BOOL_OP         reduce using rule 13 (comment -> ML_COMMENT new_line .)
    NOT             reduce using rule 13 (comment -> ML_COMMENT new_line .)
    COMP            reduce using rule 13 (comment -> ML_COMMENT new_line .)
    $end            reduce using rule 13 (comment -> ML_COMMENT new_line .)
    IF_END          reduce using rule 13 (comment -> ML_COMMENT new_line .)
    IF_FALSE        reduce using rule 13 (comment -> ML_COMMENT new_line .)
    END_LOOP        reduce using rule 13 (comment -> ML_COMMENT new_line .)


state 34

    (34) expression_bool -> BOOL_OP expression_bool . AN expression_bool
    (35) expression_bool -> BOOL_OP expression_bool . AN expression_bool new_line

    AN              shift and go to state 56


state 35

    (20) expression_num -> MIN_OP expression_num . AN expression_num
    (25) expression_num -> MIN_OP expression_num . AN expression_num new_line

    AN              shift and go to state 57


state 36

    (11) comment -> statement ML_COMMENT . new_line
    (13) comment -> ML_COMMENT . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 58

state 37

    (10) comment -> statement SL_COMMENT . new_line
    (12) comment -> SL_COMMENT . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 59

state 38

    (2) programme -> statement programme .

    $end            reduce using rule 2 (programme -> statement programme .)
    END_LOOP        reduce using rule 2 (programme -> statement programme .)
    IF_END          reduce using rule 2 (programme -> statement programme .)
    IF_FALSE        reduce using rule 2 (programme -> statement programme .)


state 39

    (16) expression_num -> ADD_OP expression_num . AN expression_num
    (21) expression_num -> ADD_OP expression_num . AN expression_num new_line

    AN              shift and go to state 60


state 40

    (33) expression_bool -> BOOL new_line .

    NL              reduce using rule 33 (expression_bool -> BOOL new_line .)
    SL_COMMENT      reduce using rule 33 (expression_bool -> BOOL new_line .)
    ML_COMMENT      reduce using rule 33 (expression_bool -> BOOL new_line .)
    BREAK           reduce using rule 33 (expression_bool -> BOOL new_line .)
    IDENTIFIER      reduce using rule 33 (expression_bool -> BOOL new_line .)
    DECLARATION     reduce using rule 33 (expression_bool -> BOOL new_line .)
    WHILE           reduce using rule 33 (expression_bool -> BOOL new_line .)
    FOR             reduce using rule 33 (expression_bool -> BOOL new_line .)
    ADD_OP          reduce using rule 33 (expression_bool -> BOOL new_line .)
    MUL_OP          reduce using rule 33 (expression_bool -> BOOL new_line .)
    MOD_OP          reduce using rule 33 (expression_bool -> BOOL new_line .)
    MAX_OP          reduce using rule 33 (expression_bool -> BOOL new_line .)
    MIN_OP          reduce using rule 33 (expression_bool -> BOOL new_line .)
    INC_OP          reduce using rule 33 (expression_bool -> BOOL new_line .)
    NUMBER          reduce using rule 33 (expression_bool -> BOOL new_line .)
    BOOL            reduce using rule 33 (expression_bool -> BOOL new_line .)
    BOOL_OP         reduce using rule 33 (expression_bool -> BOOL new_line .)
    NOT             reduce using rule 33 (expression_bool -> BOOL new_line .)
    COMP            reduce using rule 33 (expression_bool -> BOOL new_line .)
    $end            reduce using rule 33 (expression_bool -> BOOL new_line .)
    END_LOOP        reduce using rule 33 (expression_bool -> BOOL new_line .)
    IF_END          reduce using rule 33 (expression_bool -> BOOL new_line .)
    IF_FALSE        reduce using rule 33 (expression_bool -> BOOL new_line .)
    IF              reduce using rule 33 (expression_bool -> BOOL new_line .)
    AN              reduce using rule 33 (expression_bool -> BOOL new_line .)


state 41

    (31) expression_num -> IDENTIFIER new_line .

    BREAK           reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    IDENTIFIER      reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    DECLARATION     reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    WHILE           reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    FOR             reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    SL_COMMENT      reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    ML_COMMENT      reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    ADD_OP          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    MUL_OP          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    MOD_OP          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    MAX_OP          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    MIN_OP          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    INC_OP          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    NUMBER          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    BOOL            reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    BOOL_OP         reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    NOT             reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    COMP            reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    IF_END          reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    AN              reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    NL              reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    $end            reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    END_LOOP        reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    IF_FALSE        reduce using rule 31 (expression_num -> IDENTIFIER new_line .)
    IF              reduce using rule 31 (expression_num -> IDENTIFIER new_line .)


state 42

    (42) assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE . expression
    (43) assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE . expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    expression_num                 shift and go to state 7
    expression                     shift and go to state 61
    expression_bool                shift and go to state 62

state 43

    (50) structure -> expression_bool IF . new_line IF_TRUE new_line programme IF_END
    (51) structure -> expression_bool IF . new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> expression_bool IF . new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> expression_bool IF . new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 63

state 44

    (48) structure -> FOR IDENTIFIER . UNTIL expression_num programme END_LOOP
    (49) structure -> FOR IDENTIFIER . UNTIL expression_num programme END_LOOP new_line

    UNTIL           shift and go to state 64


state 45

    (19) expression_num -> MAX_OP expression_num . AN expression_num
    (24) expression_num -> MAX_OP expression_num . AN expression_num new_line

    AN              shift and go to state 65


state 46

    (17) expression_num -> MUL_OP expression_num . AN expression_num
    (22) expression_num -> MUL_OP expression_num . AN expression_num new_line

    AN              shift and go to state 66


state 47

    (18) expression_num -> MOD_OP expression_num . AN expression_num
    (23) expression_num -> MOD_OP expression_num . AN expression_num new_line

    AN              shift and go to state 67


state 48

    (12) comment -> SL_COMMENT new_line .

    SL_COMMENT      reduce using rule 12 (comment -> SL_COMMENT new_line .)
    ML_COMMENT      reduce using rule 12 (comment -> SL_COMMENT new_line .)
    BREAK           reduce using rule 12 (comment -> SL_COMMENT new_line .)
    IDENTIFIER      reduce using rule 12 (comment -> SL_COMMENT new_line .)
    DECLARATION     reduce using rule 12 (comment -> SL_COMMENT new_line .)
    WHILE           reduce using rule 12 (comment -> SL_COMMENT new_line .)
    FOR             reduce using rule 12 (comment -> SL_COMMENT new_line .)
    ADD_OP          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    MUL_OP          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    MOD_OP          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    MAX_OP          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    MIN_OP          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    INC_OP          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    NUMBER          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    BOOL            reduce using rule 12 (comment -> SL_COMMENT new_line .)
    BOOL_OP         reduce using rule 12 (comment -> SL_COMMENT new_line .)
    NOT             reduce using rule 12 (comment -> SL_COMMENT new_line .)
    COMP            reduce using rule 12 (comment -> SL_COMMENT new_line .)
    $end            reduce using rule 12 (comment -> SL_COMMENT new_line .)
    IF_END          reduce using rule 12 (comment -> SL_COMMENT new_line .)
    IF_FALSE        reduce using rule 12 (comment -> SL_COMMENT new_line .)
    END_LOOP        reduce using rule 12 (comment -> SL_COMMENT new_line .)


state 49

    (9) statement -> BREAK new_line .

    SL_COMMENT      reduce using rule 9 (statement -> BREAK new_line .)
    ML_COMMENT      reduce using rule 9 (statement -> BREAK new_line .)
    BREAK           reduce using rule 9 (statement -> BREAK new_line .)
    IDENTIFIER      reduce using rule 9 (statement -> BREAK new_line .)
    DECLARATION     reduce using rule 9 (statement -> BREAK new_line .)
    WHILE           reduce using rule 9 (statement -> BREAK new_line .)
    FOR             reduce using rule 9 (statement -> BREAK new_line .)
    ADD_OP          reduce using rule 9 (statement -> BREAK new_line .)
    MUL_OP          reduce using rule 9 (statement -> BREAK new_line .)
    MOD_OP          reduce using rule 9 (statement -> BREAK new_line .)
    MAX_OP          reduce using rule 9 (statement -> BREAK new_line .)
    MIN_OP          reduce using rule 9 (statement -> BREAK new_line .)
    INC_OP          reduce using rule 9 (statement -> BREAK new_line .)
    NUMBER          reduce using rule 9 (statement -> BREAK new_line .)
    BOOL            reduce using rule 9 (statement -> BREAK new_line .)
    BOOL_OP         reduce using rule 9 (statement -> BREAK new_line .)
    NOT             reduce using rule 9 (statement -> BREAK new_line .)
    COMP            reduce using rule 9 (statement -> BREAK new_line .)
    $end            reduce using rule 9 (statement -> BREAK new_line .)
    END_LOOP        reduce using rule 9 (statement -> BREAK new_line .)
    IF_END          reduce using rule 9 (statement -> BREAK new_line .)
    IF_FALSE        reduce using rule 9 (statement -> BREAK new_line .)


state 50

    (40) declaration -> DECLARATION IDENTIFIER . ASSIGNEMENT_DECL expression
    (41) declaration -> DECLARATION IDENTIFIER . ASSIGNEMENT_DECL expression new_line

    ASSIGNEMENT_DECL shift and go to state 68


state 51

    (36) expression_bool -> NOT expression_bool .
    (37) expression_bool -> NOT expression_bool . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    SL_COMMENT      reduce using rule 36 (expression_bool -> NOT expression_bool .)
    ML_COMMENT      reduce using rule 36 (expression_bool -> NOT expression_bool .)
    BREAK           reduce using rule 36 (expression_bool -> NOT expression_bool .)
    IDENTIFIER      reduce using rule 36 (expression_bool -> NOT expression_bool .)
    DECLARATION     reduce using rule 36 (expression_bool -> NOT expression_bool .)
    WHILE           reduce using rule 36 (expression_bool -> NOT expression_bool .)
    FOR             reduce using rule 36 (expression_bool -> NOT expression_bool .)
    ADD_OP          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    MUL_OP          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    MOD_OP          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    MAX_OP          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    MIN_OP          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    INC_OP          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    NUMBER          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    BOOL            reduce using rule 36 (expression_bool -> NOT expression_bool .)
    BOOL_OP         reduce using rule 36 (expression_bool -> NOT expression_bool .)
    NOT             reduce using rule 36 (expression_bool -> NOT expression_bool .)
    COMP            reduce using rule 36 (expression_bool -> NOT expression_bool .)
    $end            reduce using rule 36 (expression_bool -> NOT expression_bool .)
    END_LOOP        reduce using rule 36 (expression_bool -> NOT expression_bool .)
    IF_END          reduce using rule 36 (expression_bool -> NOT expression_bool .)
    IF_FALSE        reduce using rule 36 (expression_bool -> NOT expression_bool .)
    IF              reduce using rule 36 (expression_bool -> NOT expression_bool .)
    AN              reduce using rule 36 (expression_bool -> NOT expression_bool .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 36 (expression_bool -> NOT expression_bool .) ]

    new_line                       shift and go to state 69

state 52

    (38) expression_bool -> COMP expression_num . AN expression_num
    (39) expression_bool -> COMP expression_num . AN expression_num new_line

    AN              shift and go to state 70


state 53

    (45) new_line -> NL NL .

    SL_COMMENT      reduce using rule 45 (new_line -> NL NL .)
    ML_COMMENT      reduce using rule 45 (new_line -> NL NL .)
    BREAK           reduce using rule 45 (new_line -> NL NL .)
    IDENTIFIER      reduce using rule 45 (new_line -> NL NL .)
    DECLARATION     reduce using rule 45 (new_line -> NL NL .)
    WHILE           reduce using rule 45 (new_line -> NL NL .)
    FOR             reduce using rule 45 (new_line -> NL NL .)
    ADD_OP          reduce using rule 45 (new_line -> NL NL .)
    MUL_OP          reduce using rule 45 (new_line -> NL NL .)
    MOD_OP          reduce using rule 45 (new_line -> NL NL .)
    MAX_OP          reduce using rule 45 (new_line -> NL NL .)
    MIN_OP          reduce using rule 45 (new_line -> NL NL .)
    INC_OP          reduce using rule 45 (new_line -> NL NL .)
    NUMBER          reduce using rule 45 (new_line -> NL NL .)
    BOOL            reduce using rule 45 (new_line -> NL NL .)
    BOOL_OP         reduce using rule 45 (new_line -> NL NL .)
    NOT             reduce using rule 45 (new_line -> NL NL .)
    COMP            reduce using rule 45 (new_line -> NL NL .)
    $end            reduce using rule 45 (new_line -> NL NL .)
    NL              reduce using rule 45 (new_line -> NL NL .)
    AN              reduce using rule 45 (new_line -> NL NL .)
    END_LOOP        reduce using rule 45 (new_line -> NL NL .)
    IF_END          reduce using rule 45 (new_line -> NL NL .)
    IF_FALSE        reduce using rule 45 (new_line -> NL NL .)
    IF              reduce using rule 45 (new_line -> NL NL .)
    IF_TRUE         reduce using rule 45 (new_line -> NL NL .)


state 54

    (27) expression_num -> INC_OP expression_num new_line .

    BREAK           reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    IDENTIFIER      reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    DECLARATION     reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    WHILE           reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    FOR             reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    SL_COMMENT      reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    ML_COMMENT      reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    ADD_OP          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    MUL_OP          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    MOD_OP          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    MAX_OP          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    MIN_OP          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    INC_OP          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    NUMBER          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    BOOL            reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    BOOL_OP         reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    NOT             reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    COMP            reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    IF_END          reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    AN              reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    NL              reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    $end            reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    END_LOOP        reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    IF_FALSE        reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)
    IF              reduce using rule 27 (expression_num -> INC_OP expression_num new_line .)


state 55

    (46) structure -> WHILE expression_bool programme . END_LOOP
    (47) structure -> WHILE expression_bool programme . END_LOOP new_line

    END_LOOP        shift and go to state 71


state 56

    (34) expression_bool -> BOOL_OP expression_bool AN . expression_bool
    (35) expression_bool -> BOOL_OP expression_bool AN . expression_bool new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    expression_bool                shift and go to state 72

state 57

    (20) expression_num -> MIN_OP expression_num AN . expression_num
    (25) expression_num -> MIN_OP expression_num AN . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 73

state 58

    (11) comment -> statement ML_COMMENT new_line .
    (13) comment -> ML_COMMENT new_line .

  ! reduce/reduce conflict for SL_COMMENT resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for ML_COMMENT resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for BREAK resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for DECLARATION resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for FOR resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for ADD_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for MUL_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for MOD_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for MAX_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for MIN_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for INC_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for BOOL resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for BOOL_OP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for COMP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for $end resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for END_LOOP resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for IF_END resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
  ! reduce/reduce conflict for IF_FALSE resolved using rule 11 (comment -> statement ML_COMMENT new_line .)
    SL_COMMENT      reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    ML_COMMENT      reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    BREAK           reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    IDENTIFIER      reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    DECLARATION     reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    WHILE           reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    FOR             reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    ADD_OP          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    MUL_OP          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    MOD_OP          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    MAX_OP          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    MIN_OP          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    INC_OP          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    NUMBER          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    BOOL            reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    BOOL_OP         reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    NOT             reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    COMP            reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    $end            reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    END_LOOP        reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    IF_END          reduce using rule 11 (comment -> statement ML_COMMENT new_line .)
    IF_FALSE        reduce using rule 11 (comment -> statement ML_COMMENT new_line .)

  ! SL_COMMENT      [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! ML_COMMENT      [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! BREAK           [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! IDENTIFIER      [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! DECLARATION     [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! WHILE           [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! FOR             [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! ADD_OP          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! MUL_OP          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! MOD_OP          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! MAX_OP          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! MIN_OP          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! INC_OP          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! NUMBER          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! BOOL            [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! BOOL_OP         [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! NOT             [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! COMP            [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! $end            [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! END_LOOP        [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! IF_END          [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]
  ! IF_FALSE        [ reduce using rule 13 (comment -> ML_COMMENT new_line .) ]


state 59

    (10) comment -> statement SL_COMMENT new_line .
    (12) comment -> SL_COMMENT new_line .

  ! reduce/reduce conflict for SL_COMMENT resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for ML_COMMENT resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for BREAK resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for DECLARATION resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for ADD_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for MUL_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for MOD_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for MAX_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for MIN_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for INC_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for BOOL resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for BOOL_OP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for COMP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for $end resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for END_LOOP resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for IF_END resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
  ! reduce/reduce conflict for IF_FALSE resolved using rule 10 (comment -> statement SL_COMMENT new_line .)
    SL_COMMENT      reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    ML_COMMENT      reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    BREAK           reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    IDENTIFIER      reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    DECLARATION     reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    WHILE           reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    FOR             reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    ADD_OP          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    MUL_OP          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    MOD_OP          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    MAX_OP          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    MIN_OP          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    INC_OP          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    NUMBER          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    BOOL            reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    BOOL_OP         reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    NOT             reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    COMP            reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    $end            reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    END_LOOP        reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    IF_END          reduce using rule 10 (comment -> statement SL_COMMENT new_line .)
    IF_FALSE        reduce using rule 10 (comment -> statement SL_COMMENT new_line .)

  ! SL_COMMENT      [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! ML_COMMENT      [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! BREAK           [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! IDENTIFIER      [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! DECLARATION     [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! WHILE           [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! FOR             [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! ADD_OP          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! MUL_OP          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! MOD_OP          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! MAX_OP          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! MIN_OP          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! INC_OP          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! NUMBER          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! BOOL            [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! BOOL_OP         [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! NOT             [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! COMP            [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! $end            [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! END_LOOP        [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! IF_END          [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]
  ! IF_FALSE        [ reduce using rule 12 (comment -> SL_COMMENT new_line .) ]


state 60

    (16) expression_num -> ADD_OP expression_num AN . expression_num
    (21) expression_num -> ADD_OP expression_num AN . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 74

state 61

    (42) assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .
    (43) assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    ML_COMMENT      reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    BREAK           reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    IDENTIFIER      reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    DECLARATION     reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    WHILE           reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    FOR             reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    ADD_OP          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    MUL_OP          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    MOD_OP          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    MAX_OP          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    MIN_OP          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    INC_OP          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    NUMBER          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    BOOL            reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    BOOL_OP         reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    NOT             reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    COMP            reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    END_LOOP        reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    IF_END          reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    IF_FALSE        reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    $end            reduce using rule 42 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression .)
    NL              shift and go to state 29

    new_line                       shift and go to state 75

state 62

    (15) expression -> expression_bool .

    NL              reduce using rule 15 (expression -> expression_bool .)
    SL_COMMENT      reduce using rule 15 (expression -> expression_bool .)
    ML_COMMENT      reduce using rule 15 (expression -> expression_bool .)
    BREAK           reduce using rule 15 (expression -> expression_bool .)
    IDENTIFIER      reduce using rule 15 (expression -> expression_bool .)
    DECLARATION     reduce using rule 15 (expression -> expression_bool .)
    WHILE           reduce using rule 15 (expression -> expression_bool .)
    FOR             reduce using rule 15 (expression -> expression_bool .)
    ADD_OP          reduce using rule 15 (expression -> expression_bool .)
    MUL_OP          reduce using rule 15 (expression -> expression_bool .)
    MOD_OP          reduce using rule 15 (expression -> expression_bool .)
    MAX_OP          reduce using rule 15 (expression -> expression_bool .)
    MIN_OP          reduce using rule 15 (expression -> expression_bool .)
    INC_OP          reduce using rule 15 (expression -> expression_bool .)
    NUMBER          reduce using rule 15 (expression -> expression_bool .)
    BOOL            reduce using rule 15 (expression -> expression_bool .)
    BOOL_OP         reduce using rule 15 (expression -> expression_bool .)
    NOT             reduce using rule 15 (expression -> expression_bool .)
    COMP            reduce using rule 15 (expression -> expression_bool .)
    $end            reduce using rule 15 (expression -> expression_bool .)
    END_LOOP        reduce using rule 15 (expression -> expression_bool .)
    IF_END          reduce using rule 15 (expression -> expression_bool .)
    IF_FALSE        reduce using rule 15 (expression -> expression_bool .)


state 63

    (50) structure -> expression_bool IF new_line . IF_TRUE new_line programme IF_END
    (51) structure -> expression_bool IF new_line . IF_TRUE new_line programme IF_END new_line
    (52) structure -> expression_bool IF new_line . IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> expression_bool IF new_line . IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line

    IF_TRUE         shift and go to state 76


state 64

    (48) structure -> FOR IDENTIFIER UNTIL . expression_num programme END_LOOP
    (49) structure -> FOR IDENTIFIER UNTIL . expression_num programme END_LOOP new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 77

state 65

    (19) expression_num -> MAX_OP expression_num AN . expression_num
    (24) expression_num -> MAX_OP expression_num AN . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 78

state 66

    (17) expression_num -> MUL_OP expression_num AN . expression_num
    (22) expression_num -> MUL_OP expression_num AN . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 79

state 67

    (18) expression_num -> MOD_OP expression_num AN . expression_num
    (23) expression_num -> MOD_OP expression_num AN . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 80

state 68

    (40) declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL . expression
    (41) declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL . expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    expression_num                 shift and go to state 7
    expression                     shift and go to state 81
    expression_bool                shift and go to state 62

state 69

    (37) expression_bool -> NOT expression_bool new_line .

    NL              reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    SL_COMMENT      reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    ML_COMMENT      reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    BREAK           reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    IDENTIFIER      reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    DECLARATION     reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    WHILE           reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    FOR             reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    ADD_OP          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    MUL_OP          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    MOD_OP          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    MAX_OP          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    MIN_OP          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    INC_OP          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    NUMBER          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    BOOL            reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    BOOL_OP         reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    NOT             reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    COMP            reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    $end            reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    END_LOOP        reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    IF_END          reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    IF_FALSE        reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    IF              reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)
    AN              reduce using rule 37 (expression_bool -> NOT expression_bool new_line .)


state 70

    (38) expression_bool -> COMP expression_num AN . expression_num
    (39) expression_bool -> COMP expression_num AN . expression_num new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line

    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    IDENTIFIER      shift and go to state 30

    expression_num                 shift and go to state 82

state 71

    (46) structure -> WHILE expression_bool programme END_LOOP .
    (47) structure -> WHILE expression_bool programme END_LOOP . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    ML_COMMENT      reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    BREAK           reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    IDENTIFIER      reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    DECLARATION     reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    WHILE           reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    FOR             reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    ADD_OP          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    MUL_OP          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    MOD_OP          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    MAX_OP          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    MIN_OP          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    INC_OP          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    NUMBER          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    BOOL            reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    BOOL_OP         reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    NOT             reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    COMP            reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    IF_END          reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    IF_FALSE        reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    END_LOOP        reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    $end            reduce using rule 46 (structure -> WHILE expression_bool programme END_LOOP .)
    NL              shift and go to state 29

    new_line                       shift and go to state 83

state 72

    (34) expression_bool -> BOOL_OP expression_bool AN expression_bool .
    (35) expression_bool -> BOOL_OP expression_bool AN expression_bool . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    SL_COMMENT      reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    ML_COMMENT      reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    BREAK           reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    IDENTIFIER      reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    DECLARATION     reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    WHILE           reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    FOR             reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    ADD_OP          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    MUL_OP          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    MOD_OP          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    MAX_OP          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    MIN_OP          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    INC_OP          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    NUMBER          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    BOOL            reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    BOOL_OP         reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    NOT             reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    COMP            reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    $end            reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    END_LOOP        reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    IF_END          reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    IF_FALSE        reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    IF              reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    AN              reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 34 (expression_bool -> BOOL_OP expression_bool AN expression_bool .) ]

    new_line                       shift and go to state 84

state 73

    (20) expression_num -> MIN_OP expression_num AN expression_num .
    (25) expression_num -> MIN_OP expression_num AN expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    IDENTIFIER      reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    DECLARATION     reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    WHILE           reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    FOR             reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    SL_COMMENT      reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    ML_COMMENT      reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    ADD_OP          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    MUL_OP          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    MOD_OP          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    MAX_OP          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    MIN_OP          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    INC_OP          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    NUMBER          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    BOOL            reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    BOOL_OP         reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    NOT             reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    COMP            reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    IF_END          reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    AN              reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    $end            reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    END_LOOP        reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    IF_FALSE        reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    IF              reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 20 (expression_num -> MIN_OP expression_num AN expression_num .) ]

    new_line                       shift and go to state 85

state 74

    (16) expression_num -> ADD_OP expression_num AN expression_num .
    (21) expression_num -> ADD_OP expression_num AN expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    IDENTIFIER      reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    DECLARATION     reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    WHILE           reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    FOR             reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    SL_COMMENT      reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    ML_COMMENT      reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    ADD_OP          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    MUL_OP          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    MOD_OP          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    MAX_OP          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    MIN_OP          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    INC_OP          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    NUMBER          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    BOOL            reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    BOOL_OP         reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    NOT             reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    COMP            reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    IF_END          reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    AN              reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    $end            reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    END_LOOP        reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    IF_FALSE        reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    IF              reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 16 (expression_num -> ADD_OP expression_num AN expression_num .) ]

    new_line                       shift and go to state 86

state 75

    (43) assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .

    SL_COMMENT      reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    ML_COMMENT      reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    BREAK           reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    IDENTIFIER      reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    DECLARATION     reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    WHILE           reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    FOR             reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    ADD_OP          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    MUL_OP          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    MOD_OP          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    MAX_OP          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    MIN_OP          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    INC_OP          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    NUMBER          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    BOOL            reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    BOOL_OP         reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    NOT             reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    COMP            reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    END_LOOP        reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    IF_END          reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    IF_FALSE        reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)
    $end            reduce using rule 43 (assignation -> IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line .)


state 76

    (50) structure -> expression_bool IF new_line IF_TRUE . new_line programme IF_END
    (51) structure -> expression_bool IF new_line IF_TRUE . new_line programme IF_END new_line
    (52) structure -> expression_bool IF new_line IF_TRUE . new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> expression_bool IF new_line IF_TRUE . new_line programme IF_FALSE new_line programme IF_END new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 87

state 77

    (48) structure -> FOR IDENTIFIER UNTIL expression_num . programme END_LOOP
    (49) structure -> FOR IDENTIFIER UNTIL expression_num . programme END_LOOP new_line
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . declaration
    (5) statement -> . expression
    (6) statement -> . structure
    (7) statement -> . comment
    (8) statement -> . BREAK
    (9) statement -> . BREAK new_line
    (42) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression
    (43) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
    (40) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (46) structure -> . WHILE expression_bool programme END_LOOP
    (47) structure -> . WHILE expression_bool programme END_LOOP new_line
    (48) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
    (50) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (10) comment -> . statement SL_COMMENT new_line
    (11) comment -> . statement ML_COMMENT new_line
    (12) comment -> . SL_COMMENT new_line
    (13) comment -> . ML_COMMENT new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BREAK           shift and go to state 22
    IDENTIFIER      shift and go to state 13
    DECLARATION     shift and go to state 23
    WHILE           shift and go to state 5
    FOR             shift and go to state 15
    SL_COMMENT      shift and go to state 21
    ML_COMMENT      shift and go to state 6
    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    comment                        shift and go to state 1
    assignation                    shift and go to state 19
    expression_bool                shift and go to state 14
    statement                      shift and go to state 10
    declaration                    shift and go to state 2
    expression_num                 shift and go to state 7
    expression                     shift and go to state 25
    structure                      shift and go to state 17
    programme                      shift and go to state 88

state 78

    (19) expression_num -> MAX_OP expression_num AN expression_num .
    (24) expression_num -> MAX_OP expression_num AN expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    IDENTIFIER      reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    DECLARATION     reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    WHILE           reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    FOR             reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    SL_COMMENT      reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    ML_COMMENT      reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    ADD_OP          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    MUL_OP          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    MOD_OP          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    MAX_OP          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    MIN_OP          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    INC_OP          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    NUMBER          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    BOOL            reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    BOOL_OP         reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    NOT             reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    COMP            reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    IF_END          reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    AN              reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    $end            reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    END_LOOP        reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    IF_FALSE        reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    IF              reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 19 (expression_num -> MAX_OP expression_num AN expression_num .) ]

    new_line                       shift and go to state 89

state 79

    (17) expression_num -> MUL_OP expression_num AN expression_num .
    (22) expression_num -> MUL_OP expression_num AN expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    IDENTIFIER      reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    DECLARATION     reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    WHILE           reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    FOR             reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    SL_COMMENT      reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    ML_COMMENT      reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    ADD_OP          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    MUL_OP          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    MOD_OP          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    MAX_OP          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    MIN_OP          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    INC_OP          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    NUMBER          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    BOOL            reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    BOOL_OP         reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    NOT             reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    COMP            reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    IF_END          reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    AN              reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    $end            reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    END_LOOP        reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    IF_FALSE        reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    IF              reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 17 (expression_num -> MUL_OP expression_num AN expression_num .) ]

    new_line                       shift and go to state 90

state 80

    (18) expression_num -> MOD_OP expression_num AN expression_num .
    (23) expression_num -> MOD_OP expression_num AN expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    BREAK           reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    IDENTIFIER      reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    DECLARATION     reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    WHILE           reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    FOR             reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    SL_COMMENT      reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    ML_COMMENT      reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    ADD_OP          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    MUL_OP          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    MOD_OP          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    MAX_OP          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    MIN_OP          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    INC_OP          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    NUMBER          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    BOOL            reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    BOOL_OP         reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    NOT             reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    COMP            reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    IF_END          reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    AN              reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    $end            reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    END_LOOP        reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    IF_FALSE        reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    IF              reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 18 (expression_num -> MOD_OP expression_num AN expression_num .) ]

    new_line                       shift and go to state 91

state 81

    (40) declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .
    (41) declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    ML_COMMENT      reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    BREAK           reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    IDENTIFIER      reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    DECLARATION     reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    WHILE           reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    FOR             reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    ADD_OP          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    MUL_OP          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    MOD_OP          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    MAX_OP          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    MIN_OP          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    INC_OP          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    NUMBER          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    BOOL            reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    BOOL_OP         reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    NOT             reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    COMP            reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    $end            reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    END_LOOP        reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    IF_END          reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    IF_FALSE        reduce using rule 40 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression .)
    NL              shift and go to state 29

    new_line                       shift and go to state 92

state 82

    (38) expression_bool -> COMP expression_num AN expression_num .
    (39) expression_bool -> COMP expression_num AN expression_num . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

  ! shift/reduce conflict for NL resolved as shift
    SL_COMMENT      reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    ML_COMMENT      reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    BREAK           reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    IDENTIFIER      reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    DECLARATION     reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    WHILE           reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    FOR             reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    ADD_OP          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    MUL_OP          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    MOD_OP          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    MAX_OP          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    MIN_OP          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    INC_OP          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    NUMBER          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    BOOL            reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    BOOL_OP         reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    NOT             reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    COMP            reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    $end            reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    END_LOOP        reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    IF_END          reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    IF_FALSE        reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    IF              reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    AN              reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .)
    NL              shift and go to state 29

  ! NL              [ reduce using rule 38 (expression_bool -> COMP expression_num AN expression_num .) ]

    new_line                       shift and go to state 93

state 83

    (47) structure -> WHILE expression_bool programme END_LOOP new_line .

    SL_COMMENT      reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    ML_COMMENT      reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    BREAK           reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    IDENTIFIER      reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    DECLARATION     reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    WHILE           reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    FOR             reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    ADD_OP          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    MUL_OP          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    MOD_OP          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    MAX_OP          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    MIN_OP          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    INC_OP          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    NUMBER          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    BOOL            reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    BOOL_OP         reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    NOT             reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    COMP            reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    IF_END          reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    IF_FALSE        reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    END_LOOP        reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)
    $end            reduce using rule 47 (structure -> WHILE expression_bool programme END_LOOP new_line .)


state 84

    (35) expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .

    NL              reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    SL_COMMENT      reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    ML_COMMENT      reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    BREAK           reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    IDENTIFIER      reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    DECLARATION     reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    WHILE           reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    FOR             reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    ADD_OP          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    MUL_OP          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    MOD_OP          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    MAX_OP          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    MIN_OP          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    INC_OP          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    NUMBER          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    BOOL            reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    BOOL_OP         reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    NOT             reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    COMP            reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    $end            reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    END_LOOP        reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    IF_END          reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    IF_FALSE        reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    IF              reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)
    AN              reduce using rule 35 (expression_bool -> BOOL_OP expression_bool AN expression_bool new_line .)


state 85

    (25) expression_num -> MIN_OP expression_num AN expression_num new_line .

    BREAK           reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    IDENTIFIER      reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    DECLARATION     reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    WHILE           reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    FOR             reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    SL_COMMENT      reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    ML_COMMENT      reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    ADD_OP          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    MUL_OP          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    MOD_OP          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    MAX_OP          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    MIN_OP          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    INC_OP          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    NUMBER          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    BOOL            reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    BOOL_OP         reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    NOT             reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    COMP            reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    IF_END          reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    AN              reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    NL              reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    $end            reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    END_LOOP        reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    IF_FALSE        reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)
    IF              reduce using rule 25 (expression_num -> MIN_OP expression_num AN expression_num new_line .)


state 86

    (21) expression_num -> ADD_OP expression_num AN expression_num new_line .

    BREAK           reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    IDENTIFIER      reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    DECLARATION     reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    WHILE           reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    FOR             reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    SL_COMMENT      reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    ML_COMMENT      reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    ADD_OP          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    MUL_OP          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    MOD_OP          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    MAX_OP          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    MIN_OP          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    INC_OP          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    NUMBER          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    BOOL            reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    BOOL_OP         reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    NOT             reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    COMP            reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    IF_END          reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    AN              reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    NL              reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    $end            reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    END_LOOP        reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    IF_FALSE        reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)
    IF              reduce using rule 21 (expression_num -> ADD_OP expression_num AN expression_num new_line .)


state 87

    (50) structure -> expression_bool IF new_line IF_TRUE new_line . programme IF_END
    (51) structure -> expression_bool IF new_line IF_TRUE new_line . programme IF_END new_line
    (52) structure -> expression_bool IF new_line IF_TRUE new_line . programme IF_FALSE new_line programme IF_END
    (53) structure -> expression_bool IF new_line IF_TRUE new_line . programme IF_FALSE new_line programme IF_END new_line
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . declaration
    (5) statement -> . expression
    (6) statement -> . structure
    (7) statement -> . comment
    (8) statement -> . BREAK
    (9) statement -> . BREAK new_line
    (42) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression
    (43) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
    (40) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (46) structure -> . WHILE expression_bool programme END_LOOP
    (47) structure -> . WHILE expression_bool programme END_LOOP new_line
    (48) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
    (50) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (10) comment -> . statement SL_COMMENT new_line
    (11) comment -> . statement ML_COMMENT new_line
    (12) comment -> . SL_COMMENT new_line
    (13) comment -> . ML_COMMENT new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BREAK           shift and go to state 22
    IDENTIFIER      shift and go to state 13
    DECLARATION     shift and go to state 23
    WHILE           shift and go to state 5
    FOR             shift and go to state 15
    SL_COMMENT      shift and go to state 21
    ML_COMMENT      shift and go to state 6
    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    comment                        shift and go to state 1
    assignation                    shift and go to state 19
    structure                      shift and go to state 17
    statement                      shift and go to state 10
    declaration                    shift and go to state 2
    expression_num                 shift and go to state 7
    expression                     shift and go to state 25
    expression_bool                shift and go to state 14
    programme                      shift and go to state 94

state 88

    (48) structure -> FOR IDENTIFIER UNTIL expression_num programme . END_LOOP
    (49) structure -> FOR IDENTIFIER UNTIL expression_num programme . END_LOOP new_line

    END_LOOP        shift and go to state 95


state 89

    (24) expression_num -> MAX_OP expression_num AN expression_num new_line .

    BREAK           reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    IDENTIFIER      reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    DECLARATION     reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    WHILE           reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    FOR             reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    SL_COMMENT      reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    ML_COMMENT      reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    ADD_OP          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    MUL_OP          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    MOD_OP          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    MAX_OP          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    MIN_OP          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    INC_OP          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    NUMBER          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    BOOL            reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    BOOL_OP         reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    NOT             reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    COMP            reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    IF_END          reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    AN              reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    NL              reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    $end            reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    END_LOOP        reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    IF_FALSE        reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)
    IF              reduce using rule 24 (expression_num -> MAX_OP expression_num AN expression_num new_line .)


state 90

    (22) expression_num -> MUL_OP expression_num AN expression_num new_line .

    BREAK           reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    IDENTIFIER      reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    DECLARATION     reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    WHILE           reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    FOR             reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    SL_COMMENT      reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    ML_COMMENT      reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    ADD_OP          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    MUL_OP          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    MOD_OP          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    MAX_OP          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    MIN_OP          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    INC_OP          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    NUMBER          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    BOOL            reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    BOOL_OP         reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    NOT             reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    COMP            reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    IF_END          reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    AN              reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    NL              reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    $end            reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    END_LOOP        reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    IF_FALSE        reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)
    IF              reduce using rule 22 (expression_num -> MUL_OP expression_num AN expression_num new_line .)


state 91

    (23) expression_num -> MOD_OP expression_num AN expression_num new_line .

    BREAK           reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    IDENTIFIER      reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    DECLARATION     reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    WHILE           reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    FOR             reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    SL_COMMENT      reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    ML_COMMENT      reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    ADD_OP          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    MUL_OP          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    MOD_OP          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    MAX_OP          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    MIN_OP          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    INC_OP          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    NUMBER          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    BOOL            reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    BOOL_OP         reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    NOT             reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    COMP            reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    IF_END          reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    AN              reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    NL              reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    $end            reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    END_LOOP        reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    IF_FALSE        reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)
    IF              reduce using rule 23 (expression_num -> MOD_OP expression_num AN expression_num new_line .)


state 92

    (41) declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .

    SL_COMMENT      reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    ML_COMMENT      reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    BREAK           reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    IDENTIFIER      reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    DECLARATION     reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    WHILE           reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    FOR             reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    ADD_OP          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    MUL_OP          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    MOD_OP          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    MAX_OP          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    MIN_OP          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    INC_OP          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    NUMBER          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    BOOL            reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    BOOL_OP         reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    NOT             reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    COMP            reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    $end            reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    END_LOOP        reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    IF_END          reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)
    IF_FALSE        reduce using rule 41 (declaration -> DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line .)


state 93

    (39) expression_bool -> COMP expression_num AN expression_num new_line .

    NL              reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    SL_COMMENT      reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    ML_COMMENT      reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    BREAK           reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    IDENTIFIER      reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    DECLARATION     reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    WHILE           reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    FOR             reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    ADD_OP          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    MUL_OP          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    MOD_OP          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    MAX_OP          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    MIN_OP          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    INC_OP          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    NUMBER          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    BOOL            reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    BOOL_OP         reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    NOT             reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    COMP            reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    $end            reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    END_LOOP        reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    IF_END          reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    IF_FALSE        reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    IF              reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)
    AN              reduce using rule 39 (expression_bool -> COMP expression_num AN expression_num new_line .)


state 94

    (50) structure -> expression_bool IF new_line IF_TRUE new_line programme . IF_END
    (51) structure -> expression_bool IF new_line IF_TRUE new_line programme . IF_END new_line
    (52) structure -> expression_bool IF new_line IF_TRUE new_line programme . IF_FALSE new_line programme IF_END
    (53) structure -> expression_bool IF new_line IF_TRUE new_line programme . IF_FALSE new_line programme IF_END new_line

    IF_END          shift and go to state 97
    IF_FALSE        shift and go to state 96


state 95

    (48) structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .
    (49) structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    ML_COMMENT      reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    BREAK           reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    IDENTIFIER      reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    DECLARATION     reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    WHILE           reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    FOR             reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    ADD_OP          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    MUL_OP          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    MOD_OP          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    MAX_OP          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    MIN_OP          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    INC_OP          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    NUMBER          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    BOOL            reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    BOOL_OP         reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    NOT             reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    COMP            reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    IF_END          reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    IF_FALSE        reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    END_LOOP        reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    $end            reduce using rule 48 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP .)
    NL              shift and go to state 29

    new_line                       shift and go to state 98

state 96

    (52) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE . new_line programme IF_END
    (53) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE . new_line programme IF_END new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    NL              shift and go to state 29

    new_line                       shift and go to state 99

state 97

    (50) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .
    (51) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    ML_COMMENT      reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    BREAK           reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    IDENTIFIER      reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    DECLARATION     reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    WHILE           reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    FOR             reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    ADD_OP          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    MUL_OP          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    MOD_OP          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    MAX_OP          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    MIN_OP          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    INC_OP          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    NUMBER          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    BOOL            reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    BOOL_OP         reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    NOT             reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    COMP            reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    IF_END          reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    IF_FALSE        reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    END_LOOP        reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    $end            reduce using rule 50 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END .)
    NL              shift and go to state 29

    new_line                       shift and go to state 100

state 98

    (49) structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .

    SL_COMMENT      reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    ML_COMMENT      reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    BREAK           reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    IDENTIFIER      reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    DECLARATION     reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    WHILE           reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    FOR             reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    ADD_OP          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    MUL_OP          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    MOD_OP          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    MAX_OP          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    MIN_OP          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    INC_OP          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    NUMBER          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    BOOL            reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    BOOL_OP         reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    NOT             reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    COMP            reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    IF_END          reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    IF_FALSE        reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    END_LOOP        reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)
    $end            reduce using rule 49 (structure -> FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line .)


state 99

    (52) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line . programme IF_END
    (53) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line . programme IF_END new_line
    (1) programme -> . statement
    (2) programme -> . statement programme
    (3) statement -> . assignation
    (4) statement -> . declaration
    (5) statement -> . expression
    (6) statement -> . structure
    (7) statement -> . comment
    (8) statement -> . BREAK
    (9) statement -> . BREAK new_line
    (42) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression
    (43) assignation -> . IDENTIFIER ASSIGNEMENT_SIMPLE expression new_line
    (40) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression
    (41) declaration -> . DECLARATION IDENTIFIER ASSIGNEMENT_DECL expression new_line
    (14) expression -> . expression_num
    (15) expression -> . expression_bool
    (46) structure -> . WHILE expression_bool programme END_LOOP
    (47) structure -> . WHILE expression_bool programme END_LOOP new_line
    (48) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP
    (49) structure -> . FOR IDENTIFIER UNTIL expression_num programme END_LOOP new_line
    (50) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END
    (51) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_END new_line
    (52) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END
    (53) structure -> . expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line
    (10) comment -> . statement SL_COMMENT new_line
    (11) comment -> . statement ML_COMMENT new_line
    (12) comment -> . SL_COMMENT new_line
    (13) comment -> . ML_COMMENT new_line
    (16) expression_num -> . ADD_OP expression_num AN expression_num
    (17) expression_num -> . MUL_OP expression_num AN expression_num
    (18) expression_num -> . MOD_OP expression_num AN expression_num
    (19) expression_num -> . MAX_OP expression_num AN expression_num
    (20) expression_num -> . MIN_OP expression_num AN expression_num
    (21) expression_num -> . ADD_OP expression_num AN expression_num new_line
    (22) expression_num -> . MUL_OP expression_num AN expression_num new_line
    (23) expression_num -> . MOD_OP expression_num AN expression_num new_line
    (24) expression_num -> . MAX_OP expression_num AN expression_num new_line
    (25) expression_num -> . MIN_OP expression_num AN expression_num new_line
    (26) expression_num -> . INC_OP expression_num
    (27) expression_num -> . INC_OP expression_num new_line
    (28) expression_num -> . NUMBER
    (29) expression_num -> . IDENTIFIER
    (30) expression_num -> . NUMBER new_line
    (31) expression_num -> . IDENTIFIER new_line
    (32) expression_bool -> . BOOL
    (33) expression_bool -> . BOOL new_line
    (34) expression_bool -> . BOOL_OP expression_bool AN expression_bool
    (35) expression_bool -> . BOOL_OP expression_bool AN expression_bool new_line
    (36) expression_bool -> . NOT expression_bool
    (37) expression_bool -> . NOT expression_bool new_line
    (38) expression_bool -> . COMP expression_num AN expression_num
    (39) expression_bool -> . COMP expression_num AN expression_num new_line

    BREAK           shift and go to state 22
    IDENTIFIER      shift and go to state 13
    DECLARATION     shift and go to state 23
    WHILE           shift and go to state 5
    FOR             shift and go to state 15
    SL_COMMENT      shift and go to state 21
    ML_COMMENT      shift and go to state 6
    ADD_OP          shift and go to state 11
    MUL_OP          shift and go to state 18
    MOD_OP          shift and go to state 20
    MAX_OP          shift and go to state 16
    MIN_OP          shift and go to state 9
    INC_OP          shift and go to state 4
    NUMBER          shift and go to state 3
    BOOL            shift and go to state 12
    BOOL_OP         shift and go to state 8
    NOT             shift and go to state 24
    COMP            shift and go to state 26

    comment                        shift and go to state 1
    assignation                    shift and go to state 19
    structure                      shift and go to state 17
    statement                      shift and go to state 10
    declaration                    shift and go to state 2
    expression_num                 shift and go to state 7
    expression                     shift and go to state 25
    expression_bool                shift and go to state 14
    programme                      shift and go to state 101

state 100

    (51) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .

    SL_COMMENT      reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    ML_COMMENT      reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    BREAK           reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    IDENTIFIER      reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    DECLARATION     reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    WHILE           reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    FOR             reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    ADD_OP          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    MUL_OP          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    MOD_OP          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    MAX_OP          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    MIN_OP          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    INC_OP          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    NUMBER          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    BOOL            reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    BOOL_OP         reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    NOT             reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    COMP            reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    IF_END          reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    IF_FALSE        reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    END_LOOP        reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)
    $end            reduce using rule 51 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_END new_line .)


state 101

    (52) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme . IF_END
    (53) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme . IF_END new_line

    IF_END          shift and go to state 102


state 102

    (52) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .
    (53) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END . new_line
    (44) new_line -> . NL
    (45) new_line -> . NL NL

    SL_COMMENT      reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    ML_COMMENT      reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    BREAK           reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    IDENTIFIER      reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    DECLARATION     reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    WHILE           reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    FOR             reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    ADD_OP          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    MUL_OP          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    MOD_OP          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    MAX_OP          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    MIN_OP          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    INC_OP          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    NUMBER          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    BOOL            reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    BOOL_OP         reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    NOT             reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    COMP            reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    IF_END          reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    IF_FALSE        reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    END_LOOP        reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    $end            reduce using rule 52 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END .)
    NL              shift and go to state 29

    new_line                       shift and go to state 103

state 103

    (53) structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .

    SL_COMMENT      reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    ML_COMMENT      reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    BREAK           reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    IDENTIFIER      reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    DECLARATION     reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    WHILE           reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    FOR             reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    ADD_OP          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    MUL_OP          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    MOD_OP          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    MAX_OP          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    MIN_OP          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    INC_OP          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    NUMBER          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    BOOL            reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    BOOL_OP         reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    NOT             reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    COMP            reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    IF_END          reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    IF_FALSE        reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    END_LOOP        reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)
    $end            reduce using rule 53 (structure -> expression_bool IF new_line IF_TRUE new_line programme IF_FALSE new_line programme IF_END new_line .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NL in state 3 resolved as shift
WARNING: shift/reduce conflict for NL in state 12 resolved as shift
WARNING: shift/reduce conflict for NL in state 29 resolved as shift
WARNING: shift/reduce conflict for NL in state 30 resolved as shift
WARNING: shift/reduce conflict for NL in state 31 resolved as shift
WARNING: shift/reduce conflict for NL in state 51 resolved as shift
WARNING: shift/reduce conflict for NL in state 72 resolved as shift
WARNING: shift/reduce conflict for NL in state 73 resolved as shift
WARNING: shift/reduce conflict for NL in state 74 resolved as shift
WARNING: shift/reduce conflict for NL in state 78 resolved as shift
WARNING: shift/reduce conflict for NL in state 79 resolved as shift
WARNING: shift/reduce conflict for NL in state 80 resolved as shift
WARNING: shift/reduce conflict for NL in state 82 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (comment -> statement ML_COMMENT new_line)
WARNING: rejected rule (comment -> ML_COMMENT new_line) in state 58
WARNING: reduce/reduce conflict in state 59 resolved using rule (comment -> statement SL_COMMENT new_line)
WARNING: rejected rule (comment -> SL_COMMENT new_line) in state 59
